#define ROW1 13
#define ROW2 12
#define ROW3 11
#define ROW4 10
#define ROW5 9
#define ROW6 8
#define ROW7 7
#define ROW8 6

#define COL1 5
#define COL2 4
#define COL3 3
#define COL4 A4
#define COL5 A3
#define COL6 A2
#define COL7 A1
#define COL8 A0

#define BUTTON 2

const byte row[] = {ROW1, ROW2, ROW3, ROW4, ROW5, ROW6, ROW7, ROW8};
const byte col[] = {COL1,COL2, COL3, COL4, COL5, COL6, COL7, COL8};

byte imgIndexNow = 0;
bool isPressing = false;

byte scan[8][8] = {
  {1,0,0,0,0,0,0,0},
  {0,1,0,0,0,0,0,0},
  {0,0,1,0,0,0,0,0},
  {0,0,0,1,0,0,0,0},
  {0,0,0,0,1,0,0,0},
  {0,0,0,0,0,1,0,0},
  {0,0,0,0,0,0,1,0},
  {0,0,0,0,0,0,0,1}
};


byte circle[8][8] = {{1,1,0,0,0,0,1,1},
               {1,0,1,1,1,1,0,1},
               {0,1,1,1,1,1,1,0},
               {0,1,1,1,1,1,1,0},
               {0,1,1,1,1,1,1,0},
               {0,1,1,1,1,1,1,0},
               {1,0,1,1,1,1,0,1},
               {1,1,0,0,0,0,1,1}};

byte face[8][8] = {{1,1,0,0,0,0,1,1},
              {1,0,1,1,1,1,0,1},
              {0,1,1,0,0,1,1,0},
              {0,1,1,1,1,1,1,0},
              {0,1,0,1,1,0,1,0},
              {0,1,1,0,0,1,1,0},
              {1,0,1,1,1,1,0,1},
              {1,1,0,0,0,0,1,1}};

byte face2[8][8] = {{1,1,1,1,1,1,1,1},
              {1,0,0,1,1,0,0,1},
              {1,0,0,1,1,0,0,1},
              {1,1,1,1,1,1,1,1},
              {1,0,1,1,1,1,0,1},
              {1,0,1,1,1,1,0,1},
              {1,0,0,0,0,0,0,1},
              {1,1,1,1,1,1,1,1}};

byte all[8][8] = {{0,0,0,0,0,0,0,0},
             {0,0,0,0,0,0,0,0},
             {0,0,0,0,0,0,0,0},
             {0,0,0,0,0,0,0,0},
             {0,0,0,0,0,0,0,0},
             {0,0,0,0,0,0,0,0},
             {0,0,0,0,0,0,0,0},
             {0,0,0,0,0,0,0,0}};

byte H[8][8] = {{1,1,1,1,1,1,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,0,0,0,1,1},
           {1,1,0,0,0,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,1,1,1,1,1,1}};

byte A[8][8] = {{1,1,1,1,1,1,1,1},
           {1,1,1,0,0,1,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,0,0,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,1,1,1,1,1,1}};

byte P[8][8] = {{1,1,1,1,1,1,1,1},
           {1,1,0,0,0,1,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,0,0,1,1,1},
           {1,1,0,1,1,1,1,1},
           {1,1,0,1,1,1,1,1},
           {1,1,1,1,1,1,1,1}};

byte Y[8][8] = {{1,1,1,1,1,1,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,1,0,0,1,1,1},
           {1,1,1,0,0,1,1,1},
           {1,1,1,0,0,1,1,1},
           {1,1,1,1,1,1,1,1}};

byte N[8][8] = {{1,1,1,1,1,1,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,0,1,0,1,1},
           {1,1,0,0,1,0,1,1},
           {1,1,0,1,0,0,1,1},
           {1,1,0,1,0,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,1,1,1,1,1,1}};

byte E[8][8] = {{1,1,1,1,1,1,1,1},
           {1,1,0,0,0,0,1,1},
           {1,1,0,1,1,1,1,1},
           {1,1,0,0,0,0,1,1},
           {1,1,0,0,0,0,1,1},
           {1,1,0,1,1,1,1,1},
           {1,1,0,0,0,0,1,1},
           {1,1,1,1,1,1,1,1}};

byte W[8][8] = {{1,1,1,1,1,1,1,1},
           {1,0,1,1,1,1,0,1},
           {1,0,1,1,1,1,0,1},
           {1,0,1,1,1,1,0,1},
           {1,0,1,0,0,1,0,1},
           {1,0,1,0,0,1,0,1},
           {1,0,0,0,0,0,0,1},
           {1,1,1,1,1,1,1,1}};

byte R[8][8] = {{1,1,1,1,1,1,1,1},
           {1,1,0,0,0,1,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,1,1,0,1,1},
           {1,1,0,0,0,1,1,1},
           {1,1,0,1,0,1,1,1},
           {1,1,0,1,0,0,1,1},
           {1,1,1,1,1,1,1,1}};

byte incomingByte;

void setup() {
  Serial.begin(9600);
  for (byte i = 0; i < sizeof(row)/sizeof(row[0]); i++) {
    pinMode(row[i], OUTPUT);
  }
  for (byte i = 0; i < sizeof(col)/sizeof(col[0]); i++) {
    pinMode(col[i], OUTPUT);
  }
  pinMode(2, INPUT_PULLUP);  // 可能是某個按鈕
}

void loop() {
  if (Serial.available() > 0) {
    incomingByte = Serial.read();
  }

  if (incomingByte == 'c') {
    showPattern(circle);
  } else if (incomingByte == 'H') {
    showPattern(H);
  } else if (incomingByte == 'A') {
    showPattern(A);
  }
}
void showPattern(byte matrix[8][8]){
  for(byte i = 0; i < 8; i++){
    for(byte j = 0; j < 8; j++){
      digitalWrite(row[j], 1 - scan[i][j]);
      digitalWrite(col[j], 1 - matrix[i][j]); 
    }
    for(byte j = 0; j < 8; j++){
      digitalWrite(row[j], HIGH);
      digitalWrite(col[j], LOW);  
    }
  }
}
